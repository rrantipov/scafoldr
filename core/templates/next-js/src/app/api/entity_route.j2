import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { {{ entity_name }} } from '@/drizzle/schema';
import { {{ entityName }}Schema } from '@/lib/validations';
import { eq, ilike, or, count } from 'drizzle-orm';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const query = searchParams.get('query');
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const offset = (page - 1) * limit;

    // Build where conditions
    const conditions = [];
    if (query) {
      conditions.push(
        {% for column in drizzle_columns %}
        {% if column.drizzle_type == 'varchar' or column.drizzle_type == 'text' %}
        ilike({{ entity_name }}.{{ column.name }}, `%${query}%`){% if not loop.last %},{% endif %}
        {% endif %}
        {% endfor %}
      );
    }

    // Get {{ entityNamePlural }}
    const {{ entityNamePlural }} = await db
      .select()
      .from({{ entity_name }})
      .where(conditions.length > 0 ? or(...conditions) : undefined)
      .limit(limit)
      .offset(offset)
      .orderBy({{ entity_name }}.{% for column in drizzle_columns %}{% if column.name == 'created_at' %}{{ column.name }}{% endif %}{% endfor %}{% if not drizzle_columns | selectattr('name', 'equalto', 'created_at') | list %}id{% endif %});

    // Get total count
    const totalResult = await db
      .select({ count: count() })
      .from({{ entity_name }})
      .where(conditions.length > 0 ? or(...conditions) : undefined);

    const total = totalResult[0]?.count || 0;

    return NextResponse.json({
      {{ entityNamePlural }},
      total,
      page,
      limit,
    });
  } catch (error) {
    console.error('Error fetching {{ entityNamePlural }}:', error);
    return NextResponse.json(
      { error: 'Failed to fetch {{ entityNamePlural }}' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const validatedData = {{ entityName }}Schema.parse(body);

    const [new{{ EntityName }}] = await db
      .insert({{ entity_name }})
      .values(validatedData)
      .returning();

    return NextResponse.json(new{{ EntityName }}, { status: 201 });
  } catch (error) {
    console.error('Error creating {{ entityName }}:', error);
    return NextResponse.json(
      { error: 'Failed to create {{ entityName }}' },
      { status: 500 }
    );
  }
}